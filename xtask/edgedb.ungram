// EdgeDB Schema Definition Language Un-Grammar.
//
// This grammar specifies the structure of `.esdl` concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          				-- comment
//   Name =      				-- non-terminal definition
//   'ident'     				-- token (terminal)
//   A B         				-- sequence
//   A | B       				-- alternation
//   A*          				-- zero or more repetition
//   (A (',' A)* ','?)	        -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)	            -- repetition of node A separated by ',' without a trailing comma
//   A?          				-- zero or one repetition
//   (A)         				-- same as A
//   label:A     				-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Unknown nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree
//

///////////////
// UNKNOWN NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Unknown* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

AnyRoot = SdlRoot | EqlRoot
AnyUnknown =
  SdlUnknown
  | SdlUnknownSchema
  | SdlUnknownExpression
  | UnknownExpression
  | UnknownStatement

SdlUnknown = SyntaxElement*
SdlUnknownSchema = SyntaxElement*
SdlUnknownExpression = SyntaxElement*


EmptyStatement = ';'

// Names
Name =
  UnqualifiedName
  | QualifiedName
UnqualifiedName = name: Ident
Ident =
  'plain_ident'
  | 'quoted_ident'

QualifiedName =
  name: Ident
  '::'
  path: Ident

DotReferenceName =
  name: Ident
  '.'
  path: Ident

ParameterName =
  '$'
  parameter_name: 'ident'

SdlRoot = SdlRootItemList
SdlRootItemList = SdlRootItem*

SdlRootItem =
  SdlModule
  | SdlSchema

SdlModule =
  'module'
  UnqualifiedName
  '{'
  statements: SdlSchemaList
  '}'
  ';'?

SdlSchemaList = SdlSchema*
SdlSchema = EmptyStatement
  | SdlObjectSchema
  | SdlAnnotationSchema
  | SdlSchemaScalar
  | SdlSchemaConstraint

SdlObjectSchema =
  'abstract'?
  'type'
  name: Name
  extending: SdlExtending?
  body: SdlObjectBody

SdlObjectBody = EmptyStatement | SdlObjectBlock
SdlObjectBlock =
  '{'
  annotations: SdlAnnotationList
  properties: SdlPropertyList
  links: SdlLinkList
  constraints: SdlConstraintList
  indexes: SdlIndexList
  '}'
  ';'?

SdlExtending =
  'extending'
  extends: SdlExtendingNames

SdlAnnotationList = SdlAnnotation*
SdlPropertyList = SdlProperty*
SdlLinkList = SdlLink*
SdlConstraintList = SdlConstraint*
SdlIndexList = SdlIndex*
SdlExtendingNames = (Name (',' Name)*)

/// ```
/// annotation admin_note := 'system-critical';
/// ```
///
/// The assigned value must be a / string although `$$` strings are not allowed.
/// The `r` modifier is allowed though.
SdlAnnotation =
  'annotation'
  name: UnqualifiedName
  ':='
  value: StringLiteralExpression
  EmptyStatement
SdlAnnotationSchema =
  'abstract'
  'inheritable'?
  'annotation'
  name: Name
  body: SdlAnnotationSchemaBody

SdlAnnotationSchemaBody = EmptyStatement | SdlAnnotationSchemaBlock
SdlAnnotationSchemaBlock =
  '{'
  annotations: SdlAnnotationList
  '}'
  ';'?

/// SDL Scalar
///
/// ```esdl
/// scalar type posint64 extending int64 {
///   constraint min_value(0);
/// }
/// ```
SdlSchemaScalar =
  'abstract'?
  'scalar'
  'type'
  name: Name
  extending: SdlScalarExtending?
  body: SdlScalarBody
SdlScalarExtending =
  SdlScalarExtendingType
  | SdlScalarExtendingEnum
SdlScalarExtendingType =
  'extending'
  extends: SdlExtendingNames
SdlScalarExtendingEnum =
  'extending'
  extends: SdlEnumDeclaration
SdlScalarBody = EmptyStatement | SdlScalarBlock
SdlScalarBlock =
  '{'
  annotations: SdlAnnotationList
  constraints: SdlConstraintList
  '}'
  ';'?


/// ```esdl
/// constraint min_value(0);
/// ```
SdlConstraint =
  'delegated'
  'constraint'
  name: Name
  args: SdlConstraintArgs?
  subject: SdlConstraintSubjectExpression?
  except: SdlConstraintExcept?
  body: SdlConstraintBody
SdlConstraintArgs =
  '('
  args: SdlConstraintArgList
  ')'
SdlConstraintArg =
  name: (UnqualifiedName ':')?
  value: Expression
SdlConstraintArgList = SdlConstraintArg*
SdlConstraintExcept =
  'except'
  expression: Expression
SdlConstraintBody = EmptyStatement | SdlConstraintBlock
SdlConstraintBlock =
 '{'
    annotations: SdlAnnotationList
    error_message: SdlConstraintErrorMessage?
  '}'
  ';'?

SdlSchemaConstraint =
  'abstract'
  'constraint'
  name: Name
  params: SdlSchemaConstraintArgs?
  subject: SdlConstraintSubjectExpression?
  extending: SdlExtending?
  body: SdlSchemaConstraintBody
SdlSchemaConstraintArgs =
  '('
  params: SdlSchemaConstrainParamList
  ')'
SdlSchemaConstrainParam =
  name: (UnqualifiedName ':')?
  param_type: TypeExpression
SdlSchemaConstrainParamList = SdlSchemaConstrainParam*
SdlSchemaConstraintBody = EmptyStatement | SdlSchemaConstraintBlock
SdlSchemaConstraintBlock =
 '{'
    using: Expression
    annotations: SdlAnnotationList
    error_message: SdlConstraintErrorMessage?
  '}'
  ';'?

SdlConstraintErrorMessage =
  'errmessage'
  ':='
  message: StringLiteralExpression
  EmptyStatement
SdlConstraintSubjectExpression =
  'on'
  '('
  expression: Expression
  ')'


SdlProperty = SdlUnknown
SdlLink = SdlUnknown
SdlIndex = SdlUnknown

SdlEnumDeclaration =
  'enum'
  '<'
  members: SdlEnumDeclarationMembers
  '>'

SdlEnumDeclarationMembers = (UnqualifiedName (',' UnqualifiedName)*)

//
// EdgeQL
//

EqlRoot = EqlRootItemList

UnknownExpression = SyntaxElement*
UnknownStatement = SyntaxElement*
Expression = UnknownExpression
Statement = UnknownStatement
EqlRootItemList = EqlRootItem*
EqlRootItem = AnyLiteralExpression | Expression | Statement

AnyLiteralExpression =
	StringLiteralExpression
	| IntLiteralExpression
	| FloatLiteralExpression
	| BigIntLiteralExpression
	| DecimalLiteralExpression
	| BooleanLiteralExpression
	| BytesLiteralExpression

// "abcd" | 'abcd' | $$abcd$$ | $a$abcd$a$
StringLiteralExpression = RawStringLiteralExpression | BareStringLiteralExpression

RawStringLiteralExpression =
  'r'
  value: 'string_literal'
BareStringLiteralExpression =
  value: 'string_literal'
BytesLiteralExpression = RawBytesLiteralExpression | BareBytesLiteralExpression
RawBytesLiteralExpression =
  'b'
  RawStringLiteralExpression

BareBytesLiteralExpression =
  'r'?
  'b'
  BareStringLiteralExpression

// 4, 5, 0, ...
IntLiteralExpression = value: 'int_literal'

// 4.67, 314e-2, 0.0, ...
FloatLiteralExpression = value: 'float_literal'

// 4n, 5n, 0n, ...
BigIntLiteralExpression =  value: 'big_int_literal'

// 4.67n, 314e-2n, 0.0n, ...
DecimalLiteralExpression =  value: 'decimal_literal'

// true, false
BooleanLiteralExpression = value_token: ('true' | 'false')

TypeCastExpression =
	'<'
	type: TypeExpression
	'>'
	target: TypeCastTarget

TypeCastTarget =
  AnyLiteralExpression
  | 'query_parameter'


TypeExpression =
  PrimitiveType
  | ArrayType
  | TupleType
  | RangeType
  | Name

PrimitiveType =
  StringType
  | BooleanType
  | IntSixteenType
  | IntThirtyTwoType
  | IntSixtyFourType
  | FloatThirtyTwoType
  | FloatSixtyFourType
  | BigIntType
  | DecimalType
  | JsonType
  | UuidType
  | BytesType
  | DateTimeType
  | DurationType
  | SequenceType
  | SdlEnumDeclaration

// Predefined types
StringType = 'str'
BooleanType = 'bool'
IntSixteenType = 'int16' // Numbers in names break the parser
IntThirtyTwoType = 'int32'
IntSixtyFourType = 'int64'
FloatThirtyTwoType = 'float32'
FloatSixtyFourType = 'float64'
BigIntType = 'bigint'
DecimalType = 'decimal'
JsonType = 'json'
UuidType = 'uuid'
BytesType = 'bytes'
DateTimeType = 'datetime'
DurationType = 'duration'
// This is not really used as a type since it is cast to a int64
SequenceType = 'sequence'

RangeType =
  'range'
  '<'
  member: RangeTypeMember
  '>'
RangeTypeMember =
  IntThirtyTwoType
  | IntSixtyFourType
  | FloatThirtyTwoType
  | FloatSixtyFourType
  | DecimalType
  // `cal::local_datetime` | `cal::local_date`
  | QualifiedName

ArrayType =
  'array'
  '<'
  member: PrimitiveType
  '>'

TupleType =
  'tuple'
  '<'
  members: TupleTypeMembers
  '>'
TupleTypeMembers = (TypeExpression (',' TypeExpression)*)

PathStep =
  OutgoingPathStep

OutgoingPathStep =
  '.'


//
// DDL
//


